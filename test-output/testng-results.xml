<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="100" passed="99" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-04-16T05:46:06 IST" name="Default suite" finished-at="2023-04-16T06:54:08 IST" duration-ms="4082202">
    <groups>
    </groups>
    <test started-at="2023-04-16T05:46:06 IST" name="Default test" finished-at="2023-04-16T06:54:08 IST" duration-ms="4082202">
      <class name="TestCases.TestCases">
        <test-method is-config="true" signature="setUp()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:04 IST" name="setUp" finished-at="2023-04-16T05:46:06 IST" duration-ms="1689" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:06 IST" name="beforeTest" finished-at="2023-04-16T05:46:11 IST" duration-ms="5384" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Are_Profile_ResetPassword_And_Logout_Button_Are_Present()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Are_Profile_ResetPassword_And_Logout_Button_Are_Present()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:11 IST" name="Are_Profile_ResetPassword_And_Logout_Button_Are_Present" finished-at="2023-04-16T05:46:23 IST" duration-ms="11651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Are_Profile_ResetPassword_And_Logout_Button_Are_Present -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:23 IST" name="afterTest" finished-at="2023-04-16T05:46:23 IST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:23 IST" name="beforeTest" finished-at="2023-04-16T05:46:26 IST" duration-ms="3237" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Company_Name_Is_Present_On_Header_On_HomePage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Company_Name_Is_Present_On_Header_On_HomePage()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:26 IST" name="Company_Name_Is_Present_On_Header_On_HomePage" finished-at="2023-04-16T05:46:35 IST" duration-ms="9015" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Company_Name_Is_Present_On_Header_On_HomePage -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:35 IST" name="afterTest" finished-at="2023-04-16T05:46:36 IST" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:36 IST" name="beforeTest" finished-at="2023-04-16T05:46:38 IST" duration-ms="2849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Edit_Profile_Picture_After_Uploading_And_Saving_Different_Picture_First()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Edit_Profile_Picture_After_Uploading_And_Saving_Different_Picture_First()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:46:38 IST" name="Edit_Profile_Picture_After_Uploading_And_Saving_Different_Picture_First" finished-at="2023-04-16T05:47:03 IST" duration-ms="25037" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Edit_Profile_Picture_After_Uploading_And_Saving_Different_Picture_First -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:03 IST" name="afterTest" finished-at="2023-04-16T05:47:04 IST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:04 IST" name="beforeTest" finished-at="2023-04-16T05:47:07 IST" duration-ms="2813" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Error_message_Should_Be_Displayed_If_User_Enter_Wrong_Existing_Password_While_Reseting_Password()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Error_message_Should_Be_Displayed_If_User_Enter_Wrong_Existing_Password_While_Reseting_Password()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:07 IST" name="Error_message_Should_Be_Displayed_If_User_Enter_Wrong_Existing_Password_While_Reseting_Password" finished-at="2023-04-16T05:47:31 IST" duration-ms="24294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Error_message_Should_Be_Displayed_If_User_Enter_Wrong_Existing_Password_While_Reseting_Password -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:31 IST" name="afterTest" finished-at="2023-04-16T05:47:31 IST" duration-ms="341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:31 IST" name="beforeTest" finished-at="2023-04-16T05:47:35 IST" duration-ms="3316" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Forgot_Password_Link_Is_Clickable_And_Functional()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Forgot_Password_Link_Is_Clickable_And_Functional()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:35 IST" name="Forgot_Password_Link_Is_Clickable_And_Functional" finished-at="2023-04-16T05:47:41 IST" duration-ms="6167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Forgot_Password_Link_Is_Clickable_And_Functional -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:41 IST" name="afterTest" finished-at="2023-04-16T05:47:41 IST" duration-ms="371" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:41 IST" name="beforeTest" finished-at="2023-04-16T05:47:44 IST" duration-ms="2968" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Service_Engineer_records_Are_Displayed_On_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Service_Engineer_records_Are_Displayed_On_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:44 IST" name="Service_Engineer_records_Are_Displayed_On_Dashboard" finished-at="2023-04-16T05:47:59 IST" duration-ms="14628" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Service_Engineer_records_Are_Displayed_On_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:59 IST" name="afterTest" finished-at="2023-04-16T05:47:59 IST" duration-ms="393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:47:59 IST" name="beforeTest" finished-at="2023-04-16T05:48:02 IST" duration-ms="3003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35A_Verify_that_if_No_Task_Name_Is_Entered_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35A_Verify_that_if_No_Task_Name_Is_Entered_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:48:02 IST" name="TC35A_Verify_that_if_No_Task_Name_Is_Entered_an_error_message_is_dispayed" finished-at="2023-04-16T05:48:44 IST" duration-ms="42051" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35A_Verify_that_if_No_Task_Name_Is_Entered_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:48:44 IST" name="afterTest" finished-at="2023-04-16T05:48:44 IST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:48:44 IST" name="beforeTest" finished-at="2023-04-16T05:48:49 IST" duration-ms="4149" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35B_Verify_that_if_No_service_engineer_is_Selected_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35B_Verify_that_if_No_service_engineer_is_Selected_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:48:49 IST" name="TC35B_Verify_that_if_No_service_engineer_is_Selected_an_error_message_is_dispayed" finished-at="2023-04-16T05:49:31 IST" duration-ms="42083" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35B_Verify_that_if_No_service_engineer_is_Selected_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:49:31 IST" name="afterTest" finished-at="2023-04-16T05:49:31 IST" duration-ms="322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:49:31 IST" name="beforeTest" finished-at="2023-04-16T05:49:34 IST" duration-ms="2994" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35C_Verify_that_if_No_Account_is_Selected_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35C_Verify_that_if_No_Account_is_Selected_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:49:34 IST" name="TC35C_Verify_that_if_No_Account_is_Selected_an_error_message_is_dispayed" finished-at="2023-04-16T05:50:15 IST" duration-ms="40784" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35C_Verify_that_if_No_Account_is_Selected_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:50:15 IST" name="afterTest" finished-at="2023-04-16T05:50:15 IST" duration-ms="256" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:50:15 IST" name="beforeTest" finished-at="2023-04-16T05:50:18 IST" duration-ms="2965" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35D_Verify_that_if_No_Due_Date_Is_Entered_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35D_Verify_that_if_No_Due_Date_Is_Entered_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:50:18 IST" name="TC35D_Verify_that_if_No_Due_Date_Is_Entered_an_error_message_is_dispayed" finished-at="2023-04-16T05:51:00 IST" duration-ms="41975" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35D_Verify_that_if_No_Due_Date_Is_Entered_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:00 IST" name="afterTest" finished-at="2023-04-16T05:51:00 IST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:00 IST" name="beforeTest" finished-at="2023-04-16T05:51:03 IST" duration-ms="2882" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35E_Verify_that_if_Machines_Are_Not_Selected_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35E_Verify_that_if_Machines_Are_Not_Selected_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:03 IST" name="TC35E_Verify_that_if_Machines_Are_Not_Selected_an_error_message_is_dispayed" finished-at="2023-04-16T05:51:54 IST" duration-ms="50470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35E_Verify_that_if_Machines_Are_Not_Selected_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:54 IST" name="afterTest" finished-at="2023-04-16T05:51:54 IST" duration-ms="428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:54 IST" name="beforeTest" finished-at="2023-04-16T05:51:57 IST" duration-ms="2992" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC35F_Verify_that_if_TaskType_Is_Not_Selected_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC35F_Verify_that_if_TaskType_Is_Not_Selected_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:51:57 IST" name="TC35F_Verify_that_if_TaskType_Is_Not_Selected_an_error_message_is_dispayed" finished-at="2023-04-16T05:52:39 IST" duration-ms="41749" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC35F_Verify_that_if_TaskType_Is_Not_Selected_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:52:39 IST" name="afterTest" finished-at="2023-04-16T05:52:39 IST" duration-ms="306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:52:39 IST" name="beforeTest" finished-at="2023-04-16T05:52:42 IST" duration-ms="3130" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.TC36_Verify_that_if_there_are_no_service_engineer_Accounts_and_machines_are_not_added_an_error_message_is_dispayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="TC36_Verify_that_if_there_are_no_service_engineer_Accounts_and_machines_are_not_added_an_error_message_is_dispayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:52:42 IST" name="TC36_Verify_that_if_there_are_no_service_engineer_Accounts_and_machines_are_not_added_an_error_message_is_dispayed" finished-at="2023-04-16T05:53:18 IST" duration-ms="35481" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TC36_Verify_that_if_there_are_no_service_engineer_Accounts_and_machines_are_not_added_an_error_message_is_dispayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:18 IST" name="afterTest" finished-at="2023-04-16T05:53:18 IST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:18 IST" name="beforeTest" finished-at="2023-04-16T05:53:23 IST" duration-ms="4555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Account_Task_Record_Are_Displayed_On_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Account_Task_Record_Are_Displayed_On_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:23 IST" name="Test_Account_Task_Record_Are_Displayed_On_Dashboard" finished-at="2023-04-16T05:53:34 IST" duration-ms="11591" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Account_Task_Record_Are_Displayed_On_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:34 IST" name="afterTest" finished-at="2023-04-16T05:53:34 IST" duration-ms="252" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:34 IST" name="beforeTest" finished-at="2023-04-16T05:53:37 IST" duration-ms="2938" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Create_Task_Popup_Is_Dispalyed_And_It_Has_All_The_Fields()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Create_Task_Popup_Is_Dispalyed_And_It_Has_All_The_Fields()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:37 IST" name="Test_Create_Task_Popup_Is_Dispalyed_And_It_Has_All_The_Fields" finished-at="2023-04-16T05:53:57 IST" duration-ms="20022" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Create_Task_Popup_Is_Dispalyed_And_It_Has_All_The_Fields -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:57 IST" name="afterTest" finished-at="2023-04-16T05:53:58 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:53:58 IST" name="beforeTest" finished-at="2023-04-16T05:54:01 IST" duration-ms="2892" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Distributor_Info_Is_Displayed_On_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Distributor_Info_Is_Displayed_On_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:01 IST" name="Test_Distributor_Info_Is_Displayed_On_Dashboard" finished-at="2023-04-16T05:54:12 IST" duration-ms="11319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Distributor_Info_Is_Displayed_On_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:12 IST" name="afterTest" finished-at="2023-04-16T05:54:12 IST" duration-ms="264" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:12 IST" name="beforeTest" finished-at="2023-04-16T05:54:15 IST" duration-ms="3016" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Email_In_Profie_Is_Not_Editable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Email_In_Profie_Is_Not_Editable()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:15 IST" name="Test_Email_In_Profie_Is_Not_Editable" finished-at="2023-04-16T05:54:37 IST" duration-ms="21968" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Email_In_Profie_Is_Not_Editable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:37 IST" name="afterTest" finished-at="2023-04-16T05:54:37 IST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:37 IST" name="beforeTest" finished-at="2023-04-16T05:54:40 IST" duration-ms="2920" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_For_A_Daily_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_For_A_Daily_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:54:40 IST" name="Test_For_A_Daily_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only" finished-at="2023-04-16T05:55:05 IST" duration-ms="24530" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_For_A_Daily_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:55:05 IST" name="afterTest" finished-at="2023-04-16T05:55:05 IST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:55:05 IST" name="beforeTest" finished-at="2023-04-16T05:55:08 IST" duration-ms="2699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_For_A_Monthly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_For_A_Monthly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:55:08 IST" name="Test_For_A_Monthly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only" finished-at="2023-04-16T05:56:02 IST" duration-ms="54046" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_For_A_Monthly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:02 IST" name="afterTest" finished-at="2023-04-16T05:56:02 IST" duration-ms="250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:02 IST" name="beforeTest" finished-at="2023-04-16T05:56:05 IST" duration-ms="3159" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_For_A_weekly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_For_A_weekly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:05 IST" name="Test_For_A_weekly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only" finished-at="2023-04-16T05:56:30 IST" duration-ms="24454" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_For_A_weekly_Repeating_Task_The_end_Date_Should_Be_Of_current_or_Future_Quater_Only -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:30 IST" name="afterTest" finished-at="2023-04-16T05:56:30 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:30 IST" name="beforeTest" finished-at="2023-04-16T05:56:33 IST" duration-ms="3017" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_After_Clicking_close_Button_edit_task_Popup_Is_closing()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_After_Clicking_close_Button_edit_task_Popup_Is_closing()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:33 IST" name="Test_If_After_Clicking_close_Button_edit_task_Popup_Is_closing" finished-at="2023-04-16T05:56:59 IST" duration-ms="25624" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_After_Clicking_close_Button_edit_task_Popup_Is_closing -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:59 IST" name="afterTest" finished-at="2023-04-16T05:56:59 IST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:56:59 IST" name="beforeTest" finished-at="2023-04-16T05:57:02 IST" duration-ms="2940" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_After_Clicking_edit_Task_Button_edit_task_Popup_Is_Opening()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_After_Clicking_edit_Task_Button_edit_task_Popup_Is_Opening()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:02 IST" name="Test_If_After_Clicking_edit_Task_Button_edit_task_Popup_Is_Opening" finished-at="2023-04-16T05:57:25 IST" duration-ms="22630" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_After_Clicking_edit_Task_Button_edit_task_Popup_Is_Opening -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:25 IST" name="afterTest" finished-at="2023-04-16T05:57:25 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:25 IST" name="beforeTest" finished-at="2023-04-16T05:57:28 IST" duration-ms="2727" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_After_Clicking_edit_Task_button_Is_disabled_for_incomplete_and_overdue_task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_After_Clicking_edit_Task_button_Is_disabled_for_incomplete_and_overdue_task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:28 IST" name="Test_If_After_Clicking_edit_Task_button_Is_disabled_for_incomplete_and_overdue_task" finished-at="2023-04-16T05:57:57 IST" duration-ms="29031" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_After_Clicking_edit_Task_button_Is_disabled_for_incomplete_and_overdue_task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:57 IST" name="afterTest" finished-at="2023-04-16T05:57:57 IST" duration-ms="272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:57:57 IST" name="beforeTest" finished-at="2023-04-16T05:58:00 IST" duration-ms="2730" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_All_the_Feilds_except_Schedule_Are_editable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_All_the_Feilds_except_Schedule_Are_editable()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:00 IST" name="Test_If_All_the_Feilds_except_Schedule_Are_editable" finished-at="2023-04-16T05:58:22 IST" duration-ms="22755" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_All_the_Feilds_except_Schedule_Are_editable -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:22 IST" name="afterTest" finished-at="2023-04-16T05:58:23 IST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:23 IST" name="beforeTest" finished-at="2023-04-16T05:58:27 IST" duration-ms="4111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Account_Name_Which_is_Not_On_Present_Website()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Account_Name_Which_is_Not_On_Present_Website()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:27 IST" name="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Account_Name_Which_is_Not_On_Present_Website" finished-at="2023-04-16T05:58:55 IST" duration-ms="28458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Account_Name_Which_is_Not_On_Present_Website -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:55 IST" name="afterTest" finished-at="2023-04-16T05:58:56 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:56 IST" name="beforeTest" finished-at="2023-04-16T05:58:58 IST" duration-ms="2748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Due_date_As_A_Past_Date()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Due_date_As_A_Past_Date()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:58:58 IST" name="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Due_date_As_A_Past_Date" finished-at="2023-04-16T05:59:27 IST" duration-ms="28398" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Due_date_As_A_Past_Date -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:59:27 IST" name="afterTest" finished-at="2023-04-16T05:59:27 IST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:59:27 IST" name="beforeTest" finished-at="2023-04-16T05:59:30 IST" duration-ms="2771" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Same_Service_engineer_And_Watcher()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Same_Service_engineer_And_Watcher()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T05:59:30 IST" name="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Same_Service_engineer_And_Watcher" finished-at="2023-04-16T06:00:51 IST" duration-ms="80780" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Same_Service_engineer_And_Watcher -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:00:51 IST" name="afterTest" finished-at="2023-04-16T06:00:51 IST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:00:51 IST" name="beforeTest" finished-at="2023-04-16T06:00:54 IST" duration-ms="2938" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Service_engineer_number_Which_is_Not_On_Present_Website()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Service_engineer_number_Which_is_Not_On_Present_Website()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:00:54 IST" name="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Service_engineer_number_Which_is_Not_On_Present_Website" finished-at="2023-04-16T06:01:22 IST" duration-ms="28477" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Service_engineer_number_Which_is_Not_On_Present_Website -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:01:22 IST" name="afterTest" finished-at="2023-04-16T06:01:23 IST" duration-ms="260" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:01:23 IST" name="beforeTest" finished-at="2023-04-16T06:01:25 IST" duration-ms="2928" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Watcher_Which_is_Not_On_Present_Website()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Watcher_Which_is_Not_On_Present_Website()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:01:25 IST" name="Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Watcher_Which_is_Not_On_Present_Website" finished-at="2023-04-16T06:02:42 IST" duration-ms="76667" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_If_Uploaded_Excel_Contains_Watcher_Which_is_Not_On_Present_Website -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:02:42 IST" name="afterTest" finished-at="2023-04-16T06:02:42 IST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:02:42 IST" name="beforeTest" finished-at="2023-04-16T06:02:46 IST" duration-ms="3284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_An_Error_Message_Is_Displayed_When_User_Upload_An_Empty_Excel()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_An_Error_Message_Is_Displayed_When_User_Upload_An_Empty_Excel()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:02:46 IST" name="Test_If_An_Error_Message_Is_Displayed_When_User_Upload_An_Empty_Excel" finished-at="2023-04-16T06:03:06 IST" duration-ms="20324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_An_Error_Message_Is_Displayed_When_User_Upload_An_Empty_Excel -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:06 IST" name="afterTest" finished-at="2023-04-16T06:03:06 IST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:06 IST" name="beforeTest" finished-at="2023-04-16T06:03:09 IST" duration-ms="2848" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Download_Task_Button_iS_Displayed_If_Task_Status_Is_Incomplete()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Download_Task_Button_iS_Displayed_If_Task_Status_Is_Incomplete()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:09 IST" name="Test_If_Download_Task_Button_iS_Displayed_If_Task_Status_Is_Incomplete" finished-at="2023-04-16T06:03:26 IST" duration-ms="17222" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Download_Task_Button_iS_Displayed_If_Task_Status_Is_Incomplete -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:26 IST" name="afterTest" finished-at="2023-04-16T06:03:27 IST" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:27 IST" name="beforeTest" finished-at="2023-04-16T06:03:30 IST" duration-ms="2899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_End_Dates_For_An_Daily_Repeating_Task_Are_Quaterly_Basis()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_End_Dates_For_An_Daily_Repeating_Task_Are_Quaterly_Basis()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:03:30 IST" name="Test_If_End_Dates_For_An_Daily_Repeating_Task_Are_Quaterly_Basis" finished-at="2023-04-16T06:04:04 IST" duration-ms="34352" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_End_Dates_For_An_Daily_Repeating_Task_Are_Quaterly_Basis -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:04 IST" name="afterTest" finished-at="2023-04-16T06:04:04 IST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:04 IST" name="beforeTest" finished-at="2023-04-16T06:04:07 IST" duration-ms="2786" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_End_Dates_For_An_monthly_Repeating_Task_Are_Quaterly_Basis()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_End_Dates_For_An_monthly_Repeating_Task_Are_Quaterly_Basis()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:07 IST" name="Test_If_End_Dates_For_An_monthly_Repeating_Task_Are_Quaterly_Basis" finished-at="2023-04-16T06:04:41 IST" duration-ms="34366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_End_Dates_For_An_monthly_Repeating_Task_Are_Quaterly_Basis -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:41 IST" name="afterTest" finished-at="2023-04-16T06:04:42 IST" duration-ms="263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:42 IST" name="beforeTest" finished-at="2023-04-16T06:04:44 IST" duration-ms="2767" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_End_Dates_For_An_weekly_Repeating_Task_Are_Quaterly_Basis()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_End_Dates_For_An_weekly_Repeating_Task_Are_Quaterly_Basis()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:04:44 IST" name="Test_If_End_Dates_For_An_weekly_Repeating_Task_Are_Quaterly_Basis" finished-at="2023-04-16T06:05:19 IST" duration-ms="34251" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_End_Dates_For_An_weekly_Repeating_Task_Are_Quaterly_Basis -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:19 IST" name="afterTest" finished-at="2023-04-16T06:05:19 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:19 IST" name="beforeTest" finished-at="2023-04-16T06:05:22 IST" duration-ms="2655" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Account_Feild_Uploded_Excel_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Account_Feild_Uploded_Excel_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:22 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Account_Feild_Uploded_Excel_File" finished-at="2023-04-16T06:05:50 IST" duration-ms="28321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Account_Feild_Uploded_Excel_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:50 IST" name="afterTest" finished-at="2023-04-16T06:05:50 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:50 IST" name="beforeTest" finished-at="2023-04-16T06:05:53 IST" duration-ms="2820" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Machine_Code_Feild_Uploded_Excel_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Machine_Code_Feild_Uploded_Excel_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:05:53 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Machine_Code_Feild_Uploded_Excel_File" finished-at="2023-04-16T06:06:21 IST" duration-ms="28228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Machine_Code_Feild_Uploded_Excel_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:21 IST" name="afterTest" finished-at="2023-04-16T06:06:22 IST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:22 IST" name="beforeTest" finished-at="2023-04-16T06:06:24 IST" duration-ms="2869" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Service_engineer_number_Feild_Uploded_Excel_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Service_engineer_number_Feild_Uploded_Excel_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:24 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Service_engineer_number_Feild_Uploded_Excel_File" finished-at="2023-04-16T06:06:53 IST" duration-ms="28117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Service_engineer_number_Feild_Uploded_Excel_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:53 IST" name="afterTest" finished-at="2023-04-16T06:06:53 IST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:53 IST" name="beforeTest" finished-at="2023-04-16T06:06:56 IST" duration-ms="3072" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Taskname_Feild_Uploded_Excel_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Taskname_Feild_Uploded_Excel_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:06:56 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Taskname_Feild_Uploded_Excel_File" finished-at="2023-04-16T06:07:24 IST" duration-ms="28268" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_Taskname_Feild_Uploded_Excel_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:24 IST" name="afterTest" finished-at="2023-04-16T06:07:24 IST" duration-ms="275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:24 IST" name="beforeTest" finished-at="2023-04-16T06:07:27 IST" duration-ms="2998" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_duedate_Feild_Uploded_Excel_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_duedate_Feild_Uploded_Excel_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:27 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_duedate_Feild_Uploded_Excel_File" finished-at="2023-04-16T06:07:56 IST" duration-ms="28427" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Empty_duedate_Feild_Uploded_Excel_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:56 IST" name="afterTest" finished-at="2023-04-16T06:07:56 IST" duration-ms="327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:56 IST" name="beforeTest" finished-at="2023-04-16T06:07:59 IST" duration-ms="2929" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Past_Due_Date()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Past_Due_Date()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:07:59 IST" name="Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Past_Due_Date" finished-at="2023-04-16T06:08:07 IST" duration-ms="8216" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Dispalyed_In_Case_Of_A_Past_Due_Date -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:07 IST" name="afterTest" finished-at="2023-04-16T06:08:08 IST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:08 IST" name="beforeTest" finished-at="2023-04-16T06:08:11 IST" duration-ms="2874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_Error_Message_Is_Displayed_When_New_Password_And_Confirm_Password_Are_Not_Matching()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_Error_Message_Is_Displayed_When_New_Password_And_Confirm_Password_Are_Not_Matching()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:11 IST" name="Test_If_Error_Message_Is_Displayed_When_New_Password_And_Confirm_Password_Are_Not_Matching" finished-at="2023-04-16T06:08:32 IST" duration-ms="21037" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_Error_Message_Is_Displayed_When_New_Password_And_Confirm_Password_Are_Not_Matching -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:32 IST" name="afterTest" finished-at="2023-04-16T06:08:32 IST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:32 IST" name="beforeTest" finished-at="2023-04-16T06:08:35 IST" duration-ms="2948" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_The_Upload_Excel_Button_Is_Disabled_If_No_File_Is_Uploded()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_The_Upload_Excel_Button_Is_Disabled_If_No_File_Is_Uploded()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:08:35 IST" name="Test_If_The_Upload_Excel_Button_Is_Disabled_If_No_File_Is_Uploded" finished-at="2023-04-16T06:09:01 IST" duration-ms="26620" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_The_Upload_Excel_Button_Is_Disabled_If_No_File_Is_Uploded -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:01 IST" name="afterTest" finished-at="2023-04-16T06:09:02 IST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:02 IST" name="beforeTest" finished-at="2023-04-16T06:09:05 IST" duration-ms="2909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_The_criteria_is_satisfied_If_User_Enter_a_password_which_met_the_requirement()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_The_criteria_is_satisfied_If_User_Enter_a_password_which_met_the_requirement()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:05 IST" name="Test_If_The_criteria_is_satisfied_If_User_Enter_a_password_which_met_the_requirement" finished-at="2023-04-16T06:09:23 IST" duration-ms="17908" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_The_criteria_is_satisfied_If_User_Enter_a_password_which_met_the_requirement -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:23 IST" name="afterTest" finished-at="2023-04-16T06:09:23 IST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:23 IST" name="beforeTest" finished-at="2023-04-16T06:09:26 IST" duration-ms="2778" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_There_are_Accounts_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_There_are_Accounts_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:26 IST" name="Test_If_There_are_Accounts_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task" finished-at="2023-04-16T06:09:48 IST" duration-ms="22522" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_There_are_Accounts_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:48 IST" name="afterTest" finished-at="2023-04-16T06:09:48 IST" duration-ms="273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:48 IST" name="beforeTest" finished-at="2023-04-16T06:09:51 IST" duration-ms="2916" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_There_are_service_Engineer_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_There_are_service_Engineer_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:09:51 IST" name="Test_If_There_are_service_Engineer_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task" finished-at="2023-04-16T06:10:14 IST" duration-ms="22559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_There_are_service_Engineer_availble_the_vendor_Should_be_Able_To_see_all_of_those_while_Creating_Task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:10:14 IST" name="afterTest" finished-at="2023-04-16T06:10:14 IST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:10:14 IST" name="beforeTest" finished-at="2023-04-16T06:10:17 IST" duration-ms="2926" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_Add_Comment_To_A_Task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_Add_Comment_To_A_Task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:10:17 IST" name="Test_If_User_Is_Able_Add_Comment_To_A_Task" finished-at="2023-04-16T06:11:39 IST" duration-ms="81508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_Add_Comment_To_A_Task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:11:39 IST" name="afterTest" finished-at="2023-04-16T06:11:39 IST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:11:39 IST" name="beforeTest" finished-at="2023-04-16T06:11:42 IST" duration-ms="2764" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_Delete_A_Task_Which_Is_Not_Started_Or_completed_By_Engineer()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_Delete_A_Task_Which_Is_Not_Started_Or_completed_By_Engineer()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:11:42 IST" name="Test_If_User_Is_Able_Delete_A_Task_Which_Is_Not_Started_Or_completed_By_Engineer" finished-at="2023-04-16T06:13:02 IST" duration-ms="79901" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_Delete_A_Task_Which_Is_Not_Started_Or_completed_By_Engineer -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:02 IST" name="afterTest" finished-at="2023-04-16T06:13:02 IST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:02 IST" name="beforeTest" finished-at="2023-04-16T06:13:05 IST" duration-ms="3033" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:05 IST" name="Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete" finished-at="2023-04-16T06:13:26 IST" duration-ms="20870" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:26 IST" name="afterTest" finished-at="2023-04-16T06:13:26 IST" duration-ms="339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:26 IST" name="beforeTest" finished-at="2023-04-16T06:13:29 IST" duration-ms="3102" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete_It_opens_In_a_New_Tab()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete_It_opens_In_a_New_Tab()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:29 IST" name="Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete_It_opens_In_a_New_Tab" finished-at="2023-04-16T06:13:50 IST" duration-ms="20628" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_Download_Task_If_Status_Of_Task_Is_complete_It_opens_In_a_New_Tab -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:50 IST" name="afterTest" finished-at="2023-04-16T06:13:50 IST" duration-ms="393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:13:50 IST" name="beforeTest" finished-at="2023-04-16T06:14:24 IST" duration-ms="33775" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_To_Create_A_Task_By_Uploading_Excel_In_The_Given_Format()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_To_Create_A_Task_By_Uploading_Excel_In_The_Given_Format()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:14:24 IST" name="Test_If_User_Is_Able_To_Create_A_Task_By_Uploading_Excel_In_The_Given_Format" finished-at="2023-04-16T06:15:02 IST" duration-ms="38124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_To_Create_A_Task_By_Uploading_Excel_In_The_Given_Format -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:02 IST" name="afterTest" finished-at="2023-04-16T06:15:02 IST" duration-ms="297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:02 IST" name="beforeTest" finished-at="2023-04-16T06:15:05 IST" duration-ms="2971" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_On_SideBar()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_On_SideBar()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:05 IST" name="Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_On_SideBar" finished-at="2023-04-16T06:15:18 IST" duration-ms="12331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_On_SideBar -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:18 IST" name="afterTest" finished-at="2023-04-16T06:15:18 IST" duration-ms="245" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:18 IST" name="beforeTest" finished-at="2023-04-16T06:15:21 IST" duration-ms="3521" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_Under_Profile_Icon()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_Under_Profile_Icon()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:21 IST" name="Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_Under_Profile_Icon" finished-at="2023-04-16T06:15:37 IST" duration-ms="15435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_Is_Able_To_Logout_Of_Application_On_clicking_Logout_Button_Under_Profile_Icon -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:37 IST" name="afterTest" finished-at="2023-04-16T06:15:37 IST" duration-ms="339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:37 IST" name="beforeTest" finished-at="2023-04-16T06:15:41 IST" duration-ms="3470" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_If_User_is_Able_To_Create_New_Task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_If_User_is_Able_To_Create_New_Task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:15:41 IST" name="Test_If_User_is_Able_To_Create_New_Task" finished-at="2023-04-16T06:16:53 IST" duration-ms="71999" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_If_User_is_Able_To_Create_New_Task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:16:53 IST" name="afterTest" finished-at="2023-04-16T06:16:53 IST" duration-ms="308" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:16:53 IST" name="beforeTest" finished-at="2023-04-16T06:16:56 IST" duration-ms="3435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Is_ResetPassword_PopUp_Closing_After_Clicking_Close_Button()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Is_ResetPassword_PopUp_Closing_After_Clicking_Close_Button()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:16:56 IST" name="Test_Is_ResetPassword_PopUp_Closing_After_Clicking_Close_Button" finished-at="2023-04-16T06:17:20 IST" duration-ms="23638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Is_ResetPassword_PopUp_Closing_After_Clicking_Close_Button -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:17:20 IST" name="afterTest" finished-at="2023-04-16T06:17:21 IST" duration-ms="430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:17:21 IST" name="beforeTest" finished-at="2023-04-16T06:17:23 IST" duration-ms="2907" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Just_After_Creating_A_Task_The_Status_of_task_should_be_Incomplete()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Just_After_Creating_A_Task_The_Status_of_task_should_be_Incomplete()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:17:23 IST" name="Test_Just_After_Creating_A_Task_The_Status_of_task_should_be_Incomplete" finished-at="2023-04-16T06:18:35 IST" duration-ms="71769" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Just_After_Creating_A_Task_The_Status_of_task_should_be_Incomplete -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:35 IST" name="afterTest" finished-at="2023-04-16T06:18:36 IST" duration-ms="352" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:36 IST" name="beforeTest" finished-at="2023-04-16T06:18:39 IST" duration-ms="3050" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Login_Page_Content()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Login_Page_Content()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:39 IST" name="Test_Login_Page_Content" finished-at="2023-04-16T06:18:39 IST" duration-ms="241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_Page_Content -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:39 IST" name="afterTest" finished-at="2023-04-16T06:18:39 IST" duration-ms="305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:39 IST" name="beforeTest" finished-at="2023-04-16T06:18:42 IST" duration-ms="3122" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Login_With_Invalid_Data_For_Existing_User()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Login_With_Invalid_Data_For_Existing_User()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:42 IST" name="Test_Login_With_Invalid_Data_For_Existing_User" finished-at="2023-04-16T06:18:52 IST" duration-ms="9650" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_With_Invalid_Data_For_Existing_User -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:52 IST" name="afterTest" finished-at="2023-04-16T06:18:52 IST" duration-ms="271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:52 IST" name="beforeTest" finished-at="2023-04-16T06:18:55 IST" duration-ms="2770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Login_With_Valid_Data_For_Existing_User()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Login_With_Valid_Data_For_Existing_User()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:18:55 IST" name="Test_Login_With_Valid_Data_For_Existing_User" finished-at="2023-04-16T06:19:03 IST" duration-ms="8296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_With_Valid_Data_For_Existing_User -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:03 IST" name="afterTest" finished-at="2023-04-16T06:19:04 IST" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:04 IST" name="beforeTest" finished-at="2023-04-16T06:19:06 IST" duration-ms="2729" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Login_without_Accepting_Terms_And_Conditions()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Login_without_Accepting_Terms_And_Conditions()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:06 IST" name="Test_Login_without_Accepting_Terms_And_Conditions" finished-at="2023-04-16T06:19:07 IST" duration-ms="584" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_without_Accepting_Terms_And_Conditions -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:07 IST" name="afterTest" finished-at="2023-04-16T06:19:07 IST" duration-ms="396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:07 IST" name="beforeTest" finished-at="2023-04-16T06:19:10 IST" duration-ms="2802" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Login_without_Entering_Any_Credentials()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Login_without_Entering_Any_Credentials()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:10 IST" name="Test_Login_without_Entering_Any_Credentials" finished-at="2023-04-16T06:19:10 IST" duration-ms="63" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Login_without_Entering_Any_Credentials -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:10 IST" name="afterTest" finished-at="2023-04-16T06:19:11 IST" duration-ms="471" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:11 IST" name="beforeTest" finished-at="2023-04-16T06:19:13 IST" duration-ms="2872" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_CSV()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_CSV()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:19:13 IST" name="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_CSV" finished-at="2023-04-16T06:20:20 IST" duration-ms="67038" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_CSV -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:20:20 IST" name="afterTest" finished-at="2023-04-16T06:20:21 IST" duration-ms="402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:20:21 IST" name="beforeTest" finished-at="2023-04-16T06:20:24 IST" duration-ms="3040" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:20:24 IST" name="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart" finished-at="2023-04-16T06:21:16 IST" duration-ms="51989" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:21:16 IST" name="afterTest" finished-at="2023-04-16T06:21:16 IST" duration-ms="303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:21:16 IST" name="beforeTest" finished-at="2023-04-16T06:21:19 IST" duration-ms="2818" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart_For_A_Specifiic_Machine()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart_For_A_Specifiic_Machine()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:21:19 IST" name="Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart_For_A_Specifiic_Machine" finished-at="2023-04-16T06:22:14 IST" duration-ms="54942" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Solcare_observation_Records_Are_Displayed_And_User_Is_Able_To_Export_Chart_For_A_Specifiic_Machine -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:14 IST" name="afterTest" finished-at="2023-04-16T06:22:14 IST" duration-ms="281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:14 IST" name="beforeTest" finished-at="2023-04-16T06:22:18 IST" duration-ms="3729" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Solcare_observation_Records_Are_Displayed_On_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Solcare_observation_Records_Are_Displayed_On_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:18 IST" name="Test_Solcare_observation_Records_Are_Displayed_On_Dashboard" finished-at="2023-04-16T06:22:34 IST" duration-ms="15643" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Solcare_observation_Records_Are_Displayed_On_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:34 IST" name="afterTest" finished-at="2023-04-16T06:22:34 IST" duration-ms="262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:34 IST" name="beforeTest" finished-at="2023-04-16T06:22:37 IST" duration-ms="2967" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Task_Status_Is_Displayed_On_Dashbaoard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Task_Status_Is_Displayed_On_Dashbaoard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:37 IST" name="Test_Task_Status_Is_Displayed_On_Dashbaoard" finished-at="2023-04-16T06:22:48 IST" duration-ms="11430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Task_Status_Is_Displayed_On_Dashbaoard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:48 IST" name="afterTest" finished-at="2023-04-16T06:22:49 IST" duration-ms="340" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:49 IST" name="beforeTest" finished-at="2023-04-16T06:22:51 IST" duration-ms="2741" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_Terms_And_Condition_Is_Clickable_And_Return_Expected_Content()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_Terms_And_Condition_Is_Clickable_And_Return_Expected_Content()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:51 IST" name="Test_Terms_And_Condition_Is_Clickable_And_Return_Expected_Content" finished-at="2023-04-16T06:22:59 IST" duration-ms="7328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_Terms_And_Condition_Is_Clickable_And_Return_Expected_Content -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:59 IST" name="afterTest" finished-at="2023-04-16T06:22:59 IST" duration-ms="283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:22:59 IST" name="beforeTest" finished-at="2023-04-16T06:23:02 IST" duration-ms="2815" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Test_User_Profile_Data_Is_Editable_And_When_Updated_Changes_Are_Visible_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Test_User_Profile_Data_Is_Editable_And_When_Updated_Changes_Are_Visible_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:23:02 IST" name="Test_User_Profile_Data_Is_Editable_And_When_Updated_Changes_Are_Visible_Dashboard" finished-at="2023-04-16T06:23:51 IST" duration-ms="49018" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_User_Profile_Data_Is_Editable_And_When_Updated_Changes_Are_Visible_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:23:51 IST" name="afterTest" finished-at="2023-04-16T06:23:51 IST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:23:51 IST" name="beforeTest" finished-at="2023-04-16T06:23:54 IST" duration-ms="2874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Upload_Profile_Picture_And_Save_It()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Upload_Profile_Picture_And_Save_It()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:23:54 IST" name="Upload_Profile_Picture_And_Save_It" finished-at="2023-04-16T06:24:23 IST" duration-ms="28597" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Upload_Profile_Picture_And_Save_It -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:23 IST" name="afterTest" finished-at="2023-04-16T06:24:23 IST" duration-ms="310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:23 IST" name="beforeTest" finished-at="2023-04-16T06:24:26 IST" duration-ms="2819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.User_Is_Able_To_See_And_Accept_cookies()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="User_Is_Able_To_See_And_Accept_cookies()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:26 IST" name="User_Is_Able_To_See_And_Accept_cookies" finished-at="2023-04-16T06:24:32 IST" duration-ms="6187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- User_Is_Able_To_See_And_Accept_cookies -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:32 IST" name="afterTest" finished-at="2023-04-16T06:24:32 IST" duration-ms="234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:32 IST" name="beforeTest" finished-at="2023-04-16T06:24:35 IST" duration-ms="3075" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.User_Is_Able_To_See_Dashboard()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="User_Is_Able_To_See_Dashboard()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:35 IST" name="User_Is_Able_To_See_Dashboard" finished-at="2023-04-16T06:24:47 IST" duration-ms="11443" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- User_Is_Able_To_See_Dashboard -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:47 IST" name="afterTest" finished-at="2023-04-16T06:24:47 IST" duration-ms="261" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:47 IST" name="beforeTest" finished-at="2023-04-16T06:24:50 IST" duration-ms="3120" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:24:50 IST" name="Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values" finished-at="2023-04-16T06:26:09 IST" duration-ms="78746" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:26:09 IST" name="afterTest" finished-at="2023-04-16T06:26:09 IST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:26:09 IST" name="beforeTest" finished-at="2023-04-16T06:26:12 IST" duration-ms="3169" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values_when_Created_From_Excel()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values_when_Created_From_Excel()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:26:12 IST" name="Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values_when_Created_From_Excel" finished-at="2023-04-16T06:27:21 IST" duration-ms="68284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_ALL_The_Feilds_After_creating_The_Task_Have_correct_Values_when_Created_From_Excel -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:21 IST" name="afterTest" finished-at="2023-04-16T06:27:21 IST" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:21 IST" name="beforeTest" finished-at="2023-04-16T06:27:24 IST" duration-ms="2783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_If_None_Button_Is_PreSelected_By_Default()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_If_None_Button_Is_PreSelected_By_Default()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:24 IST" name="Verify_If_None_Button_Is_PreSelected_By_Default" finished-at="2023-04-16T06:27:39 IST" duration-ms="15291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_If_None_Button_Is_PreSelected_By_Default -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:39 IST" name="afterTest" finished-at="2023-04-16T06:27:39 IST" duration-ms="250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:39 IST" name="beforeTest" finished-at="2023-04-16T06:27:42 IST" duration-ms="2888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_clicking_Close_Icon_Download_Excel_Instruction_Pop_Up_Is_Closed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_clicking_Close_Icon_Download_Excel_Instruction_Pop_Up_Is_Closed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:27:42 IST" name="Verify_On_clicking_Close_Icon_Download_Excel_Instruction_Pop_Up_Is_Closed" finished-at="2023-04-16T06:28:01 IST" duration-ms="19368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_clicking_Close_Icon_Download_Excel_Instruction_Pop_Up_Is_Closed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:01 IST" name="afterTest" finished-at="2023-04-16T06:28:02 IST" duration-ms="421" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:02 IST" name="beforeTest" finished-at="2023-04-16T06:28:05 IST" duration-ms="2895" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_clicking_Download_Excel_An_Instruction_Pop_Up_Is_Displayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_clicking_Download_Excel_An_Instruction_Pop_Up_Is_Displayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:05 IST" name="Verify_On_clicking_Download_Excel_An_Instruction_Pop_Up_Is_Displayed" finished-at="2023-04-16T06:28:21 IST" duration-ms="16297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_clicking_Download_Excel_An_Instruction_Pop_Up_Is_Displayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:21 IST" name="afterTest" finished-at="2023-04-16T06:28:21 IST" duration-ms="290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:21 IST" name="beforeTest" finished-at="2023-04-16T06:28:24 IST" duration-ms="2853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_clicking_Download_Sample_Excel_on_Instruction_Pop_Up_An_Excel_File_Is_Downloaded()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_clicking_Download_Sample_Excel_on_Instruction_Pop_Up_An_Excel_File_Is_Downloaded()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:28:24 IST" name="Verify_On_clicking_Download_Sample_Excel_on_Instruction_Pop_Up_An_Excel_File_Is_Downloaded" finished-at="2023-04-16T06:29:14 IST" duration-ms="49710" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_clicking_Download_Sample_Excel_on_Instruction_Pop_Up_An_Excel_File_Is_Downloaded -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:14 IST" name="afterTest" finished-at="2023-04-16T06:29:14 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:14 IST" name="beforeTest" finished-at="2023-04-16T06:29:17 IST" duration-ms="3202" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_clicking_upload_Excel_A_Pop_Up_Is_Displayed_which_Has_Options_To_Upload_File()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_clicking_upload_Excel_A_Pop_Up_Is_Displayed_which_Has_Options_To_Upload_File()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:17 IST" name="Verify_On_clicking_upload_Excel_A_Pop_Up_Is_Displayed_which_Has_Options_To_Upload_File" finished-at="2023-04-16T06:29:34 IST" duration-ms="16328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_clicking_upload_Excel_A_Pop_Up_Is_Displayed_which_Has_Options_To_Upload_File -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:34 IST" name="afterTest" finished-at="2023-04-16T06:29:34 IST" duration-ms="242" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:34 IST" name="beforeTest" finished-at="2023-04-16T06:29:37 IST" duration-ms="2853" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_selecting_Schedule_Daily_Button_Select_End_Date_Field_Should_Be_Displayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_selecting_Schedule_Daily_Button_Select_End_Date_Field_Should_Be_Displayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:29:37 IST" name="Verify_On_selecting_Schedule_Daily_Button_Select_End_Date_Field_Should_Be_Displayed" finished-at="2023-04-16T06:31:01 IST" duration-ms="83842" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_selecting_Schedule_Daily_Button_Select_End_Date_Field_Should_Be_Displayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:31:01 IST" name="afterTest" finished-at="2023-04-16T06:31:01 IST" duration-ms="277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:31:01 IST" name="beforeTest" finished-at="2023-04-16T06:31:04 IST" duration-ms="2998" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Alternate_Month_All_Dates_Should_Be_Present()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Alternate_Month_All_Dates_Should_Be_Present()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:31:04 IST" name="Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Alternate_Month_All_Dates_Should_Be_Present" finished-at="2023-04-16T06:32:32 IST" duration-ms="88566" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Alternate_Month_All_Dates_Should_Be_Present -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:32:32 IST" name="afterTest" finished-at="2023-04-16T06:32:33 IST" duration-ms="317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:32:33 IST" name="beforeTest" finished-at="2023-04-16T06:32:36 IST" duration-ms="3080" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Every_Month_All_Dates_Should_Be_Present()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Every_Month_All_Dates_Should_Be_Present()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:32:36 IST" name="Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Every_Month_All_Dates_Should_Be_Present" finished-at="2023-04-16T06:34:04 IST" duration-ms="88501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_selecting_Schedule_monthly_Button_And_Selecting_Every_Month_All_Dates_Should_Be_Present -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:04 IST" name="afterTest" finished-at="2023-04-16T06:34:05 IST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:05 IST" name="beforeTest" finished-at="2023-04-16T06:34:08 IST" duration-ms="3061" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_selecting_Schedule_monthly_Button_Select_End_Date_Field_And_Select_month_DropDown_Should_Be_Displayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_selecting_Schedule_monthly_Button_Select_End_Date_Field_And_Select_month_DropDown_Should_Be_Displayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:08 IST" name="Verify_On_selecting_Schedule_monthly_Button_Select_End_Date_Field_And_Select_month_DropDown_Should_Be_Displayed" finished-at="2023-04-16T06:34:33 IST" duration-ms="24838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_selecting_Schedule_monthly_Button_Select_End_Date_Field_And_Select_month_DropDown_Should_Be_Displayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:33 IST" name="afterTest" finished-at="2023-04-16T06:34:33 IST" duration-ms="409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:33 IST" name="beforeTest" finished-at="2023-04-16T06:34:36 IST" duration-ms="2691" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_On_selecting_Schedule_weekly_Button_Select_End_Date_Field_And_Select_Week_and_WeekDays_Should_Be_Displayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_On_selecting_Schedule_weekly_Button_Select_End_Date_Field_And_Select_Week_and_WeekDays_Should_Be_Displayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:34:36 IST" name="Verify_On_selecting_Schedule_weekly_Button_Select_End_Date_Field_And_Select_Week_and_WeekDays_Should_Be_Displayed" finished-at="2023-04-16T06:36:27 IST" duration-ms="111256" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_On_selecting_Schedule_weekly_Button_Select_End_Date_Field_And_Select_Week_and_WeekDays_Should_Be_Displayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:36:27 IST" name="afterTest" finished-at="2023-04-16T06:36:27 IST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:36:27 IST" name="beforeTest" finished-at="2023-04-16T06:36:41 IST" duration-ms="13386" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_Test_User_is_Able_To_Create_New_Task_With_Bacteria_Fungi_Check_As_TaskType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_Test_User_is_Able_To_Create_New_Task_With_Bacteria_Fungi_Check_As_TaskType()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:36:41 IST" name="Verify_Test_User_is_Able_To_Create_New_Task_With_Bacteria_Fungi_Check_As_TaskType" finished-at="2023-04-16T06:38:01 IST" duration-ms="80574" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Test_User_is_Able_To_Create_New_Task_With_Bacteria_Fungi_Check_As_TaskType -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:38:01 IST" name="afterTest" finished-at="2023-04-16T06:38:01 IST" duration-ms="286" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:38:01 IST" name="beforeTest" finished-at="2023-04-16T06:38:05 IST" duration-ms="3023" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_Test_User_is_Able_To_Create_New_Task_With_Oil_Skimming_As_TaskType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_Test_User_is_Able_To_Create_New_Task_With_Oil_Skimming_As_TaskType()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:38:05 IST" name="Verify_Test_User_is_Able_To_Create_New_Task_With_Oil_Skimming_As_TaskType" finished-at="2023-04-16T06:39:23 IST" duration-ms="78253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Test_User_is_Able_To_Create_New_Task_With_Oil_Skimming_As_TaskType -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:39:23 IST" name="afterTest" finished-at="2023-04-16T06:39:23 IST" duration-ms="276" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:39:23 IST" name="beforeTest" finished-at="2023-04-16T06:39:26 IST" duration-ms="2801" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_Test_User_is_Able_To_Create_New_Task_With_Solcare_Service_As_TaskType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_Test_User_is_Able_To_Create_New_Task_With_Solcare_Service_As_TaskType()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:39:26 IST" name="Verify_Test_User_is_Able_To_Create_New_Task_With_Solcare_Service_As_TaskType" finished-at="2023-04-16T06:40:44 IST" duration-ms="78617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Test_User_is_Able_To_Create_New_Task_With_Solcare_Service_As_TaskType -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:40:44 IST" name="afterTest" finished-at="2023-04-16T06:40:45 IST" duration-ms="300" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:40:45 IST" name="beforeTest" finished-at="2023-04-16T06:40:48 IST" duration-ms="2864" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_Test_User_is_Able_To_Create_New_Task_With_Sump_Cleaning_As_TaskType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_Test_User_is_Able_To_Create_New_Task_With_Sump_Cleaning_As_TaskType()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:40:48 IST" name="Verify_Test_User_is_Able_To_Create_New_Task_With_Sump_Cleaning_As_TaskType" finished-at="2023-04-16T06:43:27 IST" duration-ms="159827" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Test_User_is_Able_To_Create_New_Task_With_Sump_Cleaning_As_TaskType -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:43:27 IST" name="afterTest" finished-at="2023-04-16T06:43:28 IST" duration-ms="170" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:43:28 IST" name="beforeTest" finished-at="2023-04-16T06:43:31 IST" duration-ms="3025" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_After_Selecting_A_machine_The_Selected_Name_Displayed_Is_Correct()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_After_Selecting_A_machine_The_Selected_Name_Displayed_Is_Correct()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:43:31 IST" name="Verify_That_After_Selecting_A_machine_The_Selected_Name_Displayed_Is_Correct" finished-at="2023-04-16T06:43:56 IST" duration-ms="25779" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_After_Selecting_A_machine_The_Selected_Name_Displayed_Is_Correct -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:43:56 IST" name="afterTest" finished-at="2023-04-16T06:43:57 IST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:43:57 IST" name="beforeTest" finished-at="2023-04-16T06:44:00 IST" duration-ms="2733" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_See_And_Select_All_Four_TaskTypes()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_See_And_Select_All_Four_TaskTypes()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:44:00 IST" name="Verify_That_User_Is_Able_To_See_And_Select_All_Four_TaskTypes" finished-at="2023-04-16T06:44:43 IST" duration-ms="43604" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_See_And_Select_All_Four_TaskTypes -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:44:43 IST" name="afterTest" finished-at="2023-04-16T06:44:43 IST" duration-ms="270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:44:43 IST" name="beforeTest" finished-at="2023-04-16T06:44:46 IST" duration-ms="2730" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_A_Single_Machine()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_A_Single_Machine()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:44:46 IST" name="Verify_That_User_Is_Able_To_Select_A_Single_Machine" finished-at="2023-04-16T06:46:29 IST" duration-ms="102922" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_A_Single_Machine -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:29 IST" name="afterTest" finished-at="2023-04-16T06:46:29 IST" duration-ms="299" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:29 IST" name="beforeTest" finished-at="2023-04-16T06:46:32 IST" duration-ms="2748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_Accounts_And_Selected_Account_Is_visible()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_Accounts_And_Selected_Account_Is_visible()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:32 IST" name="Verify_That_User_Is_Able_To_Select_Accounts_And_Selected_Account_Is_visible" finished-at="2023-04-16T06:46:51 IST" duration-ms="18506" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_Accounts_And_Selected_Account_Is_visible -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:51 IST" name="afterTest" finished-at="2023-04-16T06:46:51 IST" duration-ms="265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:51 IST" name="beforeTest" finished-at="2023-04-16T06:46:54 IST" duration-ms="3083" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_All_the_Machines()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_All_the_Machines()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:46:54 IST" name="Verify_That_User_Is_Able_To_Select_All_the_Machines" finished-at="2023-04-16T06:48:37 IST" duration-ms="103200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_All_the_Machines -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:48:37 IST" name="afterTest" finished-at="2023-04-16T06:48:38 IST" duration-ms="388" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:48:38 IST" name="beforeTest" finished-at="2023-04-16T06:48:41 IST" duration-ms="2976" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_More_Than_One_Machine()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_More_Than_One_Machine()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:48:41 IST" name="Verify_That_User_Is_Able_To_Select_More_Than_One_Machine" finished-at="2023-04-16T06:50:00 IST" duration-ms="79436" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_More_Than_One_Machine -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:00 IST" name="afterTest" finished-at="2023-04-16T06:50:00 IST" duration-ms="296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:00 IST" name="beforeTest" finished-at="2023-04-16T06:50:03 IST" duration-ms="2780" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_Service_Engineer_And_Selected_Service_Engineer_Is_visible()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_Service_Engineer_And_Selected_Service_Engineer_Is_visible()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:03 IST" name="Verify_That_User_Is_Able_To_Select_Service_Engineer_And_Selected_Service_Engineer_Is_visible" finished-at="2023-04-16T06:50:22 IST" duration-ms="18909" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_Service_Engineer_And_Selected_Service_Engineer_Is_visible -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:22 IST" name="afterTest" finished-at="2023-04-16T06:50:22 IST" duration-ms="291" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:22 IST" name="beforeTest" finished-at="2023-04-16T06:50:42 IST" duration-ms="19724" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Able_To_Select_machines_And_Selected_Machines_Are_visible()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Able_To_Select_machines_And_Selected_Machines_Are_visible()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:50:42 IST" name="Verify_That_User_Is_Able_To_Select_machines_And_Selected_Machines_Are_visible" finished-at="2023-04-16T06:51:10 IST" duration-ms="27788" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Able_To_Select_machines_And_Selected_Machines_Are_visible -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:10 IST" name="afterTest" finished-at="2023-04-16T06:51:10 IST" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:10 IST" name="beforeTest" finished-at="2023-04-16T06:51:13 IST" duration-ms="2771" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_User_Is_Not_Able_Select_The_Same_Service_Engineer_And_Watcher()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_User_Is_Not_Able_Select_The_Same_Service_Engineer_And_Watcher()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:13 IST" name="Verify_That_User_Is_Not_Able_Select_The_Same_Service_Engineer_And_Watcher" finished-at="2023-04-16T06:51:38 IST" duration-ms="24662" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_User_Is_Not_Able_Select_The_Same_Service_Engineer_And_Watcher -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:38 IST" name="afterTest" finished-at="2023-04-16T06:51:38 IST" duration-ms="298" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:38 IST" name="beforeTest" finished-at="2023-04-16T06:51:41 IST" duration-ms="2681" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_Watchers_Field_Is_Disabled_Untill_Service_Engineer_Is_Not_Selected()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_Watchers_Field_Is_Disabled_Untill_Service_Engineer_Is_Not_Selected()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:51:41 IST" name="Verify_That_Watchers_Field_Is_Disabled_Untill_Service_Engineer_Is_Not_Selected" finished-at="2023-04-16T06:52:10 IST" duration-ms="29950" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_Watchers_Field_Is_Disabled_Untill_Service_Engineer_Is_Not_Selected -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:10 IST" name="afterTest" finished-at="2023-04-16T06:52:11 IST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:11 IST" name="beforeTest" finished-at="2023-04-16T06:52:14 IST" duration-ms="2881" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Verify_That_machines_Field_Is_Disabled_Untill_Account_Is_Not_Selected()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Verify_That_machines_Field_Is_Disabled_Untill_Account_Is_Not_Selected()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:14 IST" name="Verify_That_machines_Field_Is_Disabled_Untill_Account_Is_Not_Selected" finished-at="2023-04-16T06:52:43 IST" duration-ms="29836" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_That_machines_Field_Is_Disabled_Untill_Account_Is_Not_Selected -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:43 IST" name="afterTest" finished-at="2023-04-16T06:52:44 IST" duration-ms="292" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:44 IST" name="beforeTest" finished-at="2023-04-16T06:52:47 IST" duration-ms="2821" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.Welcome_Distributers_Name_IS_Displayed()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="Welcome_Distributers_Name_IS_Displayed()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:47 IST" name="Welcome_Distributers_Name_IS_Displayed" finished-at="2023-04-16T06:52:55 IST" duration-ms="8250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Welcome_Distributers_Name_IS_Displayed -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:55 IST" name="afterTest" finished-at="2023-04-16T06:52:55 IST" duration-ms="231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="beforeTest(java.lang.reflect.Method)[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:55 IST" name="beforeTest" finished-at="2023-04-16T06:52:58 IST" duration-ms="2799" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void TestCases.TestCases.verify_Confirmation_ALert_Is_Showing_after_Deleting_Task()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method signature="verify_Confirmation_ALert_Is_Showing_after_Deleting_Task()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:52:58 IST" name="verify_Confirmation_ALert_Is_Showing_after_Deleting_Task" finished-at="2023-04-16T06:54:07 IST" duration-ms="69576" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verify_Confirmation_ALert_Is_Showing_after_Deleting_Task -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:54:07 IST" name="afterTest" finished-at="2023-04-16T06:54:08 IST" duration-ms="296" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:TestCases.TestCases@478190fc]" started-at="2023-04-16T06:54:08 IST" name="endReport" finished-at="2023-04-16T06:54:09 IST" duration-ms="690" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- TestCases.TestCases -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
